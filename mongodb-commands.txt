to see current databases list
show dbs

to create/use/switch a database
use <database name>
Ex :
use test

to create a collection into database 
db.createCollection("<collection name>")
Ex :
db.createCollection("students")

to see all collections
show collections


to insert a document into collection
db.<collection name>.insertOne({<key>: <value>, <key>: <value>})
Ex :
db.users.insertOne({name: "John", age: 30})


to insert multiple documents
db.<collection name>.insertMany([{<key>: <value>, <key>: <value>}, 
                                 {<key>: <value>, <key>: <value>}, 
                                 ...])
Ex :
db.users.insertMany([
    {name: "John", age: 30},
    {name: "Jane", age: 25},
    {name: "Bob", age: 35}

])

mongodb data type :
String, Number, Date, Object, Array, Boolean, Null, Undefined, ObjectID, BinData, MaxKey, MinKey
Ex :
{
    name: "Alex",
    age: 30, 
    dateOfBirth: new Date(), 
    isActive: true, 
    CarModel: null,
    address: {street: "123 Main St", city: "New York"}, 
    hobbies: ["reading", "swimming"]

    }

to find documents
db.<collection name>.find()
Ex :
db.users.find()

to sort documents
db.<collection name>.find().sort({<key>: 1}) // 1 for ascending order, -1 for descending order
Ex :
db.users.find().sort({age: 1})

to limit the number of documents returned
db.<collection name>.find().limit(<number>)
Ex :
db.users.find().limit(2)

to sort and limit documents togather
db.<collection name>.find().sort({<key>: 1}).limit(<number>)
Ex :
db.users.find().sort({age: 1}).limit(2)

find method with a specific condition
db.<collection name>.find({<key>: <value>})
Ex :
db.users.find({age: 30})

find({query}, {projection})
db.<collection name>.find({<key>: <value>}, {name: 1, age: 1})
Ex :
db.users.find({age: 30}, {name: 1, age: 1})

to update a document
db.<collection name>.updateOne({filter},{update})
Ex :
db.users.updateOne({name: "John"}, {$set: {age: 31}})

to update multiple documents
db.<collection name>.updateMany({filter},{update})
Ex :
db.users.updateMany({age: 30}, {$set: {age: 31}})

to update multiple with $exits method
db.<collection name>.updateMany({filter},{update})
Ex :
db.users.updateMany({age: {$exists: false}}, {$set: {age: 31}})

to delete a document
db.<collection name>.deleteOne({filter})
Ex:
db.users.deleteOne({name: "John"})

to delete multiple document
db.<collection name>.deleteMany({filter})
Ex:
db.users.deleteMany({age: 31})

comparsion query operators
Comparsion operators returns data based on value comparsions.
$eq, $ne, $gt, $gte, $lt, $lte, $in, $nin, $exists, $type
Ex:
db.users.find({age: {$gt: 30}})

Logical query operators
Logical operators performs logical comparsions using logical operators.
$and, $or, $not, $nor
Ex:
db.users.find({$or: [{age: 30}, {age: 31}]})

Array query operators
Array query operators returns data based on array comparsions.
$all, $elemMatch, $size
Ex:
db.users.find({hobbies: {$all: ["reading", "swimming"]}})

Text search
Text search is used to search text data. It is used to search text fields.
$regex, $text
Ex:
db.users.find({name: {$regex: "John"}})



to delete a collection
db.users.drop()

to drop a database
db.dropDatabase()

to exit mongo
exit